"""
Django settings for qlovematch project.

Generated by 'django-admin startproject' using Django 2.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import platform
from sys import path

import djcelery


def here(*x):
    return os.path.join(os.path.abspath(os.path.dirname(__file__)), *x)


PROJECT_ROOT = here("..")


def root(*x):
    return os.path.join(os.path.abspath(PROJECT_ROOT), *x)


path.append(root('apps'))

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "^ic4r&mxp(3$s=d#qfk4&d9vc(%1-ytj60ip-w^(hm=raxh1i%"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

IS_DEV = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin.apps.SimpleAdminConfig',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    # 'adminplus',
    'rest_framework',
    'rest_framework.authtoken',
    # 'django_crontab',
    'djcelery',
]

PROJECT_APPS = [
]

INSTALLED_APPS += THIRD_PARTY_APPS
INSTALLED_APPS += PROJECT_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'qlovematch.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': (root('templates').replace('\\', '/'),),
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'qlovematch.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME':
            'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME':
            'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME':
            'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME':
            'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/wx/static/'

# STATIC FILE CONFIGURATION
# See: https://docs.djangoproject.com/en/dev/ref/settings/#static-root
STATIC_ROOT = root('assets')

# COOKIE CONFIGURATION
# The purpose of customizing the cookie names is to avoid conflicts when
# multiple Django services are running behind the same hostname.
# Detailed information at: https://docs.djangoproject.com/en/dev/ref/settings/
SESSION_COOKIE_NAME = 'qlovematch_sessionid'
CSRF_COOKIE_NAME = 'qlovematch_csrftoken'
# END COOKIE CONFIGURATION

# AUTHENTICATION CONFIGURATION
# AUTH_USER_MODEL = 'core.User'

# Request the user's permissions in the ID token
EXTRA_SCOPE = ['permissions']

APPEND_SLASH = False

# ADMIN AND EMAIL
ADMINS = ()

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.qq.com'
EMAIL_PORT = '465'
EMAIL_HOST_USER = 'vgreen1024@foxmail.com'
EMAIL_HOST_PASSWORD = 'axyjfgwdcvagcafj'
EMAIL_SUBJECT_PREFIX = 'Hysteria'
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = SERVER_EMAIL = EMAIL_HOST_USER

# Set up logging for development use (logging to stdout)
level = 'DEBUG' if DEBUG else 'INFO'
hostname = platform.node().split(".")[0]

# Use a different address for Mac OS X
# syslog_address = '/var/run/syslog/' if platform.system().lower(
# ) == 'darwin' else 'log/'
syslog_address = 'log/'
if not os.path.exists(syslog_address):
    os.mkdir(syslog_address)

syslog_format = '%(asctime)s [service_variant=qlovematch][%(name)s] %(levelname)s [{hostname}  %(process)d] ' \
                '[%(pathname)s:%(lineno)d] - %(message)s'.format(hostname=hostname)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format':
                '%(asctime)s %(levelname)s %(process)d [%(name)s] %(pathname)s:%(lineno)d - %(message)s',
        },
        'syslog_format': {
            'format': syslog_format
        },
    },
    'handlers': {
        'console': {
            'level': level,
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
            'stream': 'ext://sys.stdout',
        },
        'default': {
            'level': level,
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': syslog_address + 'qlovematch.log',
            'formatter': 'syslog_format',
            'maxBytes': 1024 * 1024 * 500,
            'backupCount': 5,
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'default'],
            'propagate': True,
            'level': 'INFO'
        },
        'requests': {
            'handlers': ['console', 'default'],
            'propagate': True,
            'level': 'WARNING'
        },
        'urllib3': {
            'handlers': ['console', 'default'],
            'propagate': True,
            'level': 'WARNING'
        },
        'django.request': {
            'handlers': ['console', 'default'],
            'propagate': True,
            'level': 'ERROR'
        },
        'django_template': {
            'handlers': ['console', 'default'],
            'propagate': False,
            'level': 'WARNING'
        },
        'django.db.backends': {
            'handlers': ['console', 'default'],
            'propagate': False,
            'level': 'DEBUG',
        },
        '': {
            'handlers': ['console', 'default'],
            'level': 'DEBUG',
            'propagate': False
        },
    }
}

# Settings for rest_framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS':
        'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_PERMISSION_CLASSES':
        ('rest_framework.permissions.DjangoModelPermissions',
         ),
    # 'UNICODE_JSON': False,
    'PAGE_SIZE':
        10,
    'DEFAULT_RENDERER_CLASSES': (
        'core.renders.UTF8CharsetJSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
        # 'rest_framework_xml.renderers.XMLRenderer',
    ),
    # 'DATETIME_FORMAT': '%Y-%m-%d'
    # 'DEFAULT_PARSER_CLASSES': ('rest_framework.parsers.JSONParser',
    #                            'rest_framework_xml.parsers.XMLParser', )

    # 'DEFAULT_THROTTLE_CLASSES': (
    # 'rest_framework.throttling.AnonRateThrottle',
    # 'rest_framework.throttling.UserRateThrottle',),
    # 'DEFAULT_THROTTLE_RATES': {
    # 'anon': '100/hour',
    # 'user': '5/day',
    # },
}

# settings for cache
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': '',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'SOCKET_CONNECT_TIMEOUT': 5,
            'SOCKET_TIMEOUT': 5,
            "CONNECTION_POOL_KWARGS": {
                "max_connections": 100,
            },
            "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
        },
    },
}

DJANGO_REDIS_IGNORE_EXCEPTIONS = True
DJANGO_REDIS_LOG_IGNORED_EXCEPTIONS = True
DJANGO_REDIS_CONNECTION_FACTORY = "core.connectionfactory.DecodeConnectionFactory"

REDIS_TIMEOUT = 7 * 24 * 60 * 60
CUBES_REDIS_TIMEOUT = 60 * 60
NEVER_REDIS_TIMEOUT = 365 * 24 * 60 * 60

# settings for cronjobs
# python manage.py crontab show add remove --settings=qlovematch.settings.prod


# settings for celery

djcelery.setup_loader()
BROKER_TRANSPORT = 'redis'
BROKER_URL = ''
CELERY_RESULT_BACKEND = ''
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ACKS_LATE = True
CELERY_TIMEZONE = TIME_ZONE
CELERYD_MAX_TASKS_PER_CHILD = 20
CELERYD_PREFETCH_MULTIPLIER = 2
BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 172800}

QUEUE_PREFIX = 'qlovematch'
DEFAULT_QUEUE = '{}.celery.default'.format(QUEUE_PREFIX)

CELERY_DEFAULT_QUEUE = DEFAULT_QUEUE
CELERY_DEFAULT_EXCHANGE_TYPE = 'direct'
CELERY_DEFAULT_EXCHANGE = DEFAULT_QUEUE
CELERY_DEFAULT_ROUTING_KEY = DEFAULT_QUEUE

CELERY_QUEUES = {
    DEFAULT_QUEUE: {
        "exchange": DEFAULT_QUEUE,
        "routing_key": DEFAULT_QUEUE
    }
}


class Router(object):
    def route_for_task(self, task, args=None, kwargs=None):
        return DEFAULT_QUEUE


CELERY_ROUTES = (Router(),)

# setting for wxpay
WEIXINAPP_APPID = 'wxf21bc8bd1e689a96'
WEIXINAPP_MCHID = '1487892552'
WEIXINAPP_KEY = 'JbXAzDijmbdSUf87l3gz6fpf5NQQVgck'
WEIXINAPP_CERT_PEM_PATH = 'configs/wechat/apiclient_cert.pem'
WEIXINAPP_KEY_PEM_PATH = 'configs/wechat/apiclient_key.pem'

# Seperate Migrations
MIGRATE_APPS = []
MIGRATION_MODULES = {app: '%s.dev_migrations' % app for app in MIGRATE_APPS}
